import BaseController from './base/BaseController';
import {pascalName}Business from '../app/business/{pascalName}Business';
import Authenticator from '../system/Authenticator';
import {RoleCode, Claim} from '../app/model/common/CommonType';

class {pascalName}Controller extends BaseController {
    constructor() {
        super();

        this.get('/list', this.validatePagination(10), this.get{pascalName}s.bind(this));
        this.get('/count', this.count{pascalName}s.bind(this));
        this.get('/:_id', this.get{pascalName}ById.bind(this));

        this.post('/', Authenticator.checkClaims(Claim.FULL_ACCESS), this.create{pascalName}.bind(this));
        this.put('/:_id', Authenticator.checkRoles(RoleCode.Administrator), this.update{pascalName}.bind(this));
        this.delete('/:_id', Authenticator.checkRoles(RoleCode.Administrator), this.delete{pascalName}.bind(this));
    }

    async get{pascalName}s(req): Promise<any> {
        return await {pascalName}Business.instance.getList(req.query.name, req.query.page, req.query.limit);
    }

    async count{pascalName}s(req): Promise<any> {
        return await {pascalName}Business.instance.count(req.query.name);
    }

    async get{pascalName}ById(req): Promise<any> {
        return await {pascalName}Business.instance.get(req.params._id);
    }

    async create{pascalName}(req): Promise<any> {
        return await {pascalName}Business.instance.create(req.body);
    }

    async update{pascalName}(req): Promise<any> {
        return await {pascalName}Business.instance.update(req.params._id, req.body);
    }

    async delete{pascalName}(req): Promise<any> {
        return await {pascalName}Business.instance.delete(req.params._id);
    }
}

Object.seal({pascalName}Controller);
export default {pascalName}Controller;
