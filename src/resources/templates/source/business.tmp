import {camelName} from '../model/{pascalName}/{camelName}';
import {camelName}Create from '../model/{pascalName}/{camelName}Create'; // eslint-disable-line
import {camelName}Update from '../model/{pascalName}/{camelName}Update'; // eslint-disable-line
import I{camelName}Business from './interfaces/I{camelName}Business'; // eslint-disable-line
import {camelName}Repository from '../repository/{camelName}Repository';
import {ErrorCommon} from '../model/common/Error';

class {camelName}Business implements I{camelName}Business {
    private {pascalName}Repository: {camelName}Repository;

    constructor() {
        this.{pascalName}Repository = new {camelName}Repository();
    }

    async search(name?: string, page?: number, limit?: number): Promise<{camelName}[]> {
        let param = {
            query: <any>{}
        };
        if (name)
            param.query.name = new RegExp(name, 'i');

        let {pascalName}s = await this.{pascalName}Repository.find(param, {name: 1}, page, limit);
        return {camelName}.parseArray({pascalName}s);
    }

    async getCountSearch(name?: string): Promise<number> {
        let param = {
            query: <any>{}
        };
        if (name)
            param.query.name = new RegExp(name, 'i');

        return await this.{pascalName}Repository.getCount(param);
    }

    async get(_id: string): Promise<{camelName} | null> {
        if (!_id)
            return null;

        let {pascalName} = await this.{pascalName}Repository.get(_id);
        return {pascalName} && new {camelName}({pascalName});
    }

    async create(data: {camelName}Create): Promise<{camelName}> {
        let {pascalName};
        if (validateName(data.name))
            {pascalName} = await this.{pascalName}Repository.create(data);

        return {pascalName} && new {camelName}({pascalName});
    }

    async update(_id: string, data: {camelName}Update): Promise<{camelName} | null> {
        if (validateName(data.name))
            await this.{pascalName}Repository.update(_id, data);

        return await this.get(_id);
    }

    async delete(_id: string): Promise<boolean> {
        return await this.{pascalName}Repository.delete(_id);
    }
}

function validateName(name: string): boolean {
    if (!name)
        throw new ErrorCommon(105, 'Name');
    else if (name.trim().length < 4)
        throw new ErrorCommon(201, 'name', 4);

    return true;
}

Object.seal({camelName}Business);
export default {camelName}Business;
